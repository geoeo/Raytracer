//TODO:Use Refactor this
// let inline setUpMonteCarlo (surface : Surface) (ray : Ray) (t : LineParameter) (accEmitted : Color) (accScatter :Color) (currentTraceDepth : uint32) =

//         let emittedShading = surface.Emitted
//         let e = accEmitted + accScatter*emittedShading 
//         let mcSamples = surface.SampleCount
//         //let eMCAdjusted = e / surface.MCNormalization

//         let rayTraceParameters = 
//             [|
//                 for _ in 1..mcSamples do
//                     let (doesRayContribute,outRay,cosOfIncidence) = surface.Scatter ray t ((int)currentTraceDepth)
//                     let shading = surface.BRDF*cosOfIncidence / (surface.PDF*surface.MCNormalization)
//                     let s = accScatter*shading
//                     yield (currentTraceDepth, outRay , e , s)
//             |]
//         rayTraceParameters 



    let rec rayTraceAsync (previousTraceDepth , (ray : Ray) , (accEmitted : Color) , (accScatter :Color)) =
        async {
            if previousTraceDepth > maxTraceDepth 
            then  
                return accEmitted + backgroundColor*accScatter
            else
                let newTraceDepth = previousTraceDepth + 1us
                let (realSolution,t,surface) = findClosestIntersection ray surfaces
                let surfaceGeometry : Hitable = surface.Geometry
                if surfaceGeometry.IntersectionAcceptable realSolution t 1.0f (PointForRay ray t)
                then
                    let emittedShading = surface.Emitted
                    let e = accEmitted + accScatter*emittedShading 
                    let mcSamples = surface.SampleCount

                    let rayTraceParameters = 
                        [|
                            for _ in 1..mcSamples do
                                let (doesRayContribute,outRay,cosOfIncidence) = surface.Scatter ray t ((int)newTraceDepth)
                                let shading = surface.BRDF*cosOfIncidence / (surface.PDF*surface.MCNormalization)
                                let s = accScatter*shading
                                yield (newTraceDepth, outRay , e , s)
                        |]   
                    if Array.isEmpty rayTraceParameters then
                        return e
                    else 
                        let eMCAdjusted = e / surface.MCNormalization
                        let rayTracesParallel = rayTraceParameters |> Array.map rayTraceAsync |> Async.Parallel   
                        let! rayTraces = rayTracesParallel 
                        return Array.sumBy (fun x -> eMCAdjusted + x) rayTraces

                else 
                    return accEmitted + backgroundColor*accScatter
        }
            
    let rayTraceBaseAsync (ray : Ray) px py iteration = 
        async {
            let dotLookAtAndTracingRay = Vector3.Dot(Vector3.Normalize(lookAt),ray.Direction)
            let (realSolution,t,surface) = findClosestIntersection ray surfaces
            let surfaceGeometry = surface.Geometry
            if surfaceGeometry.IntersectionAcceptable realSolution t dotLookAtAndTracingRay (PointForRay ray t) then
                if iteration = 1 then writeToDepthBuffer t px py

                let emittedShading = surface.Emitted
                let mcSamples = surface.SampleCount
                let rayTraceParameters = 
                    [|
                        for _ in 1..mcSamples do
                            let (doesRayContribute,outRay,cosOfIncidence) = surface.Scatter ray t 1
                            let shading = surface.BRDF*cosOfIncidence / (surface.PDF*surface.MCNormalization)
                            let s = shading
                            yield (1us, outRay , emittedShading , s)
                    |]   
                if Array.isEmpty rayTraceParameters then
                    return emittedShading
                else 
                    let eMCAdjusted = emittedShading / surface.MCNormalization
                    let rayTracesParallel = rayTraceParameters |> Array.map rayTraceAsync |> Async.Parallel   
                    let! rayTraces = rayTracesParallel 
                    return Array.sumBy (fun x -> eMCAdjusted + x) rayTraces
                
            else
                return backgroundColor

        }


                
//TODO rewrite this to make it tail recursive
//let mutable totalShading = e/surface.MCNormalization
// for _ in 1..mcSamples do
//     let (doesRayContribute,outRay,cosOfIncidence) = surface.Scatter ray t ((int)newTraceDepth)
//     let shading = surface.BRDF*cosOfIncidence / (surface.PDF*surface.MCNormalization)
//     let s = accScatter*shading
//     totalShading <- totalShading + (rayTrace newTraceDepth (outRay , e , s))
// totalShading